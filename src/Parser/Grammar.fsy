%{
// Copyright (c) Mobile Ownership, mobileownership.org.  All Rights Reserved.  See LICENSE.txt in the project root for license information.

open System
open MobileOwnership.PolicyText
open MobileOwnership.PolicyText.Actions

%}

%start policyText

%token <string> IDENT
%token <string> STRING
%token <int64> INTEGER
%token <double> DOUBLE 
%token <bool> BOOLEAN
%token <string> OP_MULTIPLICATION OP_ADDITION OP_COMPARE
%token NULL COLON LBRACKET RBRACKET LBRACE RBRACE LPAREN RPAREN
%token FUN IF THEN ELSE ELIF BEGIN END LET REC IN MATCH WITH WHEN POLICY TRY FINALLY
%token SEND RECEIVE ON REF 
%token RARROW BAR BANG EQUAL COLON_EQUAL
%token SEMI BAR_SEMI COMMA BAR_COMMA
%token EOF

%type <Value> policyText

%right REF BANG 
%left COLON SEMI BAR_SEMI BAR RARROW
%nonassoc term_if 
%nonassoc ELSE ELIF
%left COLON_EQUAL 
%left OP_COMPARE EQUAL
%left OP_ADDITION 
%left OP_MULTIPLICATION 

%%

policyText:
    | term EOF                              { $1 }

term: 
    | infix                                 { $1 }
    | annotation                            { $1 }
    | if                                    { $1 }
    | match                                 { $1 }
    | policy                                { $1 }
    | receive                               { $1 }
    | send                                  { $1 }
    | tryWith                               { $1 }
    | tryFinally                            { $1 }
    | ref                                   { $1 }
    | dereference                           { $1 }

infix:
    | infixAssignment                       { $1 }
    | function { $1 }

function:
    | FUN term RARROW function              { termFunction parseState }
    | application                           { $1 }

application:
    | atomic                                { $1 }
    | application atomic                    { termApplication parseState }

infixAssignment:
    | infix COLON_EQUAL infix               { termInfix parseState }
    | infixCompare                          { $1 } 

infixCompare:
    | infix EQUAL infix                     { termEqual parseState }
    | infix OP_COMPARE infix                { termInfix parseState }
    | infixAddition                         { $1 } 
    
infixAddition:
    | infix OP_ADDITION infix               { termInfix parseState }
    | infixMultiplication                   { $1 }

infixMultiplication:
    | infix OP_MULTIPLICATION infix         { termInfix parseState }

annotation:
    | term COLON IDENT                      { termAnnotation parseState }

if:
    | IF term THEN term %prec term_if       { termIf 1 parseState }
    | IF term THEN term ifElse              { termIf 2 parseState }
    
ifElse:
    | ELIF term THEN term %prec term_if     { termIf 3 parseState }
    | ELIF term THEN term ifElse            { termIf 4 parseState }
    | ELSE term                             { $2 }

match:
    | MATCH term WITH rules                 { termMatch 1 parseState }
    | MATCH term WITH BAR rules             { termMatch 2 parseState }

policy:
    | POLICY term WITH rules                { termPolicy 1 parseState }
    | POLICY term WITH BAR rules            { termPolicy 2 parseState }

receive:
    | RECEIVE ON term WITH rules            { termReceive 1 parseState }
    | RECEIVE ON term WITH BAR rules        { termReceive 2 parseState }

send:
    | SEND term ON atomic                   { termSend parseState }

tryWith:
    | TRY term WITH rules                   { termTryWith parseState }

tryFinally:
    | TRY term FINALLY atomic               { termTryFinally parseState }

ref:
    | REF atomic                            { termRef parseState }

dereference:
    | BANG atomic                           { termDereference parseState }

rules:
    | rule                                  { [ $1 ] }
    | rules BAR rule                        { $3 :: $1 }

rule:
    | term RARROW atomic                    { termRule 1 parseState }
    | term WHEN term RARROW atomic          { termRule 2 parseState }

atomic: 
    | constant                              { $1 }
    | lookup                                { $1 }
    | LPAREN commaSepTerms RPAREN           { termTuple parseState }
    | BEGIN semiSepTerms END                { termSequence parseState }
    | let                                   { $1 }
    | map                                   { $1 }
    | list                                  { $1 }

let:
    | LET atomic EQUAL term 
            IN semiSepTerms END             { termLet 1 parseState }
    | LET REC atomic EQUAL term 
            IN semiSepTerms END             { termLet 2 parseState }

map:
    | LBRACE RBRACE                         { termMap 1 parseState }
    | LBRACE keyValuePairs RBRACE           { termMap 2 parseState }

keyValuePairs:
    | keyValuePair                          { [ $1 ] }
    | keyValuePairs COMMA keyValuePair      { $3 :: $1 }
    | keyValuePairs BAR_COMMA keyValuePair  { ( keyValueParallel 3 parseState ) :: $1 }

keyValuePair:
    | STRING COLON term                     { ($1, $3) }
    | IDENT COLON term                      { ($1, $3) }

list:
    | LBRACKET RBRACKET                     { termList 1 parseState }
    | LBRACKET commaSepTerms RBRACKET       { termList 2 parseState }

commaSepTerms:
    | term                                  { [ $1 ] }
    | commaSepTerms COMMA term              { $3 :: $1 }
    | commaSepTerms BAR_COMMA term          { ( termParallel 3 parseState ) :: $1 }

semiSepTerms:
    | term                                  { [ $1 ] }
    | semiSepTerms SEMI term                { $3 :: $1 }
    | semiSepTerms BAR_SEMI term            { ( termParallel 3 parseState ) :: $1 }

lookup:
    | IDENT                                 { termLookup parseState }

constant: 
    | STRING                                { valueOrHashed parseState (Value.String($1)) }
    | INTEGER                               { valueOrHashed parseState (Value.Integer($1)) }
    | DOUBLE                                { valueOrHashed parseState (Value.Double($1)) }
    | BOOLEAN                               { valueOrHashed parseState (Value.Boolean($1)) }
    | NULL                                  { valueOrHashed parseState (Value.Null) }