{
// Copyright (c) Mobile Ownership, mobileownership.org.  All Rights Reserved.  See LICENSE.txt in the project root for license information.

open System
open System.Text
open FSharp.Text.Lexing
open MobileOwnership.PolicyText.Grammar

let lexeme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
    lexbuf.EndPos <- lexbuf.StartPos.NextLine

let tokenInteger (lexbuf: LexBuffer<_>) =
    let i = System.Int64.Parse(lexeme lexbuf)
    INTEGER(i)

let tokenDouble (lexbuf: LexBuffer<_>) =
    let s = lexeme lexbuf
    let d = 
        if s.EndsWith('f') then
            System.Double.Parse(s.Substring(0, s.Length - 1))
        else
            System.Double.Parse(s)
    DOUBLE(d)

let escapeChar(lexbuf: LexBuffer<_>) =
    let s = lexeme lexbuf
    match s with
    | "\\\"" -> '\"'
    | "\\\\" -> '\\'
    | "\\/" -> '/'
    | "\\b" -> '\b'
    | "\\f" -> '\f'
    | "\\n" -> '\n'
    | "\\r" -> '\r'
    | "\\t" -> '\t'
    | _ ->
        let ns = s.Substring(2)
        let i = Convert.ToInt32(ns, 16)
        char(i)

let identOrKeyword (text: string) =
    match text with
    | "fun"     -> FUN
    | "if"      -> IF
    | "then"    -> THEN
    | "else"    -> ELSE
    | "elif"    -> ELIF
    | "let"     -> LET
    | "rec"     -> REC
    | "in"      -> IN
    | "match"   -> MATCH
    | "with"    -> WITH
    | "when"    -> WHEN
    | "policy"  -> POLICY
    | "ref"     -> REF
    | "try"     -> TRY
    | "finally" -> FINALLY
    | "send"    -> SEND
    | "receive" -> RECEIVE
    | "on"      -> ON
    | "begin"   -> BEGIN
    | "end"     -> END
    | "false"   -> BOOLEAN(false)
    | "true"    -> BOOLEAN(true)
    | "null"    -> NULL
    | _         -> IDENT(text)

let tokenOrComment t  cl b f  =
    if cl <= 0 then t else f (System.Math.Max(0, cl)) b

}

let whitespace = [' ''\n''\r''\t']*
let sign = ['+''-']?
let onenine = ['1'-'9']
let digit = ['0'-'9']
let digits = digit+
let exponent = (['E''e'] sign digits)?
let fraction = ('.' digits)?
let integer = digit | (onenine digits) | ('-' digit) | ('-' onenine digits)
let number = integer fraction exponent
let hex = digit | ['A'-'F'] | ['a'-'f']
let escape = '\\' (['\"''\\''/''b''f''n''r''t'] | 'u' hex hex hex hex)
let character = 
    [^
        '\u0000''\u0001''\u0002''\u0003''\u0004''\u0005''\u0006''\u0007'
        '\u0008''\u0009''\u000a''\u000b''\u000c''\u000d''\u000e''\u000f'
        '\u0010''\u0011''\u0012''\u0013''\u0014''\u0015''\u0016''\u0017'
        '\u0018''\u0019''\u001a''\u001b''\u001c''\u001d''\u001e''\u001f'
        '\"''\\'
    ]

let digit_char = ['0'-'9']
let letter_char = '\Lu' | '\Ll' | '\Lt' | '\Lm' | '\Lo' | '\Nl'
let connecting_char = '\Pc'
let combining_char = '\Mn' | '\Mc'
let formatting_char = '\Cf'

let ident_start_char = letter_char | '_' | '$'
let ident_char = letter_char | digit_char | connecting_char | combining_char | formatting_char | ['\'' '_']
let ident = ident_start_char ident_char*

rule policy cl = parse 
| ";"                           { tokenOrComment SEMI cl lexbuf policy }
| "|;"                          { tokenOrComment BAR_SEMI cl lexbuf policy }
| ","                           { tokenOrComment COMMA cl lexbuf policy }
| "|,"                          { tokenOrComment BAR_COMMA cl lexbuf policy }
| ":"                           { tokenOrComment COLON cl lexbuf policy }
| "["                           { tokenOrComment LBRACKET cl lexbuf policy }
| "]"                           { tokenOrComment RBRACKET cl lexbuf policy }
| "{"                           { tokenOrComment LBRACE cl lexbuf policy }
| "}"                           { tokenOrComment RBRACE cl lexbuf policy }
| "("                           { tokenOrComment LPAREN cl lexbuf policy }
| ")"                           { tokenOrComment RPAREN cl lexbuf policy }
| "->"                          { tokenOrComment RARROW cl lexbuf policy }
| "|"                           { tokenOrComment BAR cl lexbuf policy }
| "!"                           { tokenOrComment BANG cl lexbuf policy }
| "/"                           { tokenOrComment (OP_MULTIPLICATION("/")) cl lexbuf policy }
| "*"                           { tokenOrComment (OP_MULTIPLICATION("*")) cl lexbuf policy }
| "%"                           { tokenOrComment (OP_MULTIPLICATION("%")) cl lexbuf policy }
| "+"                           { tokenOrComment (OP_ADDITION("+")) cl lexbuf policy }
| "-"                           { tokenOrComment (OP_ADDITION("-")) cl lexbuf policy }
| "^"                           { tokenOrComment (OP_ADDITION("^")) cl lexbuf policy }
| "="                           { tokenOrComment EQUAL cl lexbuf policy }
| "<>"                          { tokenOrComment (OP_COMPARE("<>")) cl lexbuf policy }
| "<"                           { tokenOrComment (OP_COMPARE("<")) cl lexbuf policy }
| ">"                           { tokenOrComment (OP_COMPARE(">")) cl lexbuf policy }
| "<="                          { tokenOrComment (OP_COMPARE("<=")) cl lexbuf policy }
| "<="                          { tokenOrComment (OP_COMPARE("<=")) cl lexbuf policy }
| "&&"                          { tokenOrComment (OP_BOOLEAN("&&")) cl lexbuf policy }
| "||"                          { tokenOrComment (OP_BOOLEAN("||")) cl lexbuf policy }
| ":="                          { tokenOrComment COLON_EQUAL cl lexbuf policy }
| '\"'                          { lexString cl (new StringBuilder()) lexbuf }
| "``"                          { lexIdent cl (new StringBuilder()) lexbuf }
| integer                       { if cl <= 0 then tokenInteger lexbuf else policy cl lexbuf }
| number                        { if cl <= 0 then tokenDouble lexbuf else policy cl lexbuf }
| ident                         { if cl <= 0 then identOrKeyword (lexeme lexbuf) else policy cl lexbuf }
| "//"                          { lexComment cl lexbuf }
| "(*"                          { policy (cl + 1) lexbuf }
| "*)"                          { policy (cl - 1) lexbuf }
| whitespace                    { policy cl lexbuf }
| eof                           { EOF }
| _                             { failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }

and lexString cl sb = parse
| escape                        { (if cl <= 0 then sb.Append(escapeChar lexbuf) |> ignore); lexString cl sb lexbuf }
| character+                    { (if cl <= 0 then sb.Append(lexeme lexbuf) |> ignore); lexString cl sb lexbuf }
| '\"'                          { if cl <= 0 then STRING (sb.ToString()) else policy cl lexbuf }
| eof                           { EOF }
| _                             { if cl <= 0 then failwith "error" else policy cl lexbuf }

and lexIdent cl sb = parse
| ( [^'`' '\n' '\r' '\t'] | '`' [^ '`' '\n' '\r' '\t'] )+
                                { (if cl <= 0 then sb.Append(lexeme lexbuf) |> ignore); lexIdent cl sb lexbuf }
| "``"                          { if cl <= 0 then IDENT (sb.ToString()) else policy cl lexbuf }
| eof                           { EOF }
| _                             { if cl <= 0 then failwith "error" else policy cl lexbuf }

and lexComment cl = parse 
| [^'\n' '\r' '*']+             { lexComment cl lexbuf }
| "*)"                          { policy (cl - 1) lexbuf }
| eof                           { EOF }
| _                             { policy cl lexbuf }