// Implementation file for parser generated by fsyacc
module MobileOwnership.PolicyText.Grammar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Grammar.fsy"

// Copyright (c) Mobile Ownership, mobileownership.org.  All Rights Reserved.  See LICENSE.txt in the project root for license information.

open System
open MobileOwnership.PolicyText
open MobileOwnership.PolicyText.Actions


# 15 "Grammar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | NULL
  | COMMA
  | COLON
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | BOOLEAN of (bool)
  | DOUBLE of (double)
  | INTEGER of (int64)
  | STRING of (string)
  | IDENT of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_NULL
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_BOOLEAN
    | TOKEN_DOUBLE
    | TOKEN_INTEGER
    | TOKEN_STRING
    | TOKEN_IDENT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startpolicy
    | NONTERM_policy
    | NONTERM_term
    | NONTERM_object
    | NONTERM_members
    | NONTERM_member
    | NONTERM_array
    | NONTERM_elements

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | NULL  -> 1 
  | COMMA  -> 2 
  | COLON  -> 3 
  | LBRACKET  -> 4 
  | RBRACKET  -> 5 
  | LBRACE  -> 6 
  | RBRACE  -> 7 
  | BOOLEAN _ -> 8 
  | DOUBLE _ -> 9 
  | INTEGER _ -> 10 
  | STRING _ -> 11 
  | IDENT _ -> 12 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_NULL 
  | 2 -> TOKEN_COMMA 
  | 3 -> TOKEN_COLON 
  | 4 -> TOKEN_LBRACKET 
  | 5 -> TOKEN_RBRACKET 
  | 6 -> TOKEN_LBRACE 
  | 7 -> TOKEN_RBRACE 
  | 8 -> TOKEN_BOOLEAN 
  | 9 -> TOKEN_DOUBLE 
  | 10 -> TOKEN_INTEGER 
  | 11 -> TOKEN_STRING 
  | 12 -> TOKEN_IDENT 
  | 15 -> TOKEN_end_of_input
  | 13 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startpolicy 
    | 1 -> NONTERM_policy 
    | 2 -> NONTERM_term 
    | 3 -> NONTERM_term 
    | 4 -> NONTERM_term 
    | 5 -> NONTERM_term 
    | 6 -> NONTERM_term 
    | 7 -> NONTERM_term 
    | 8 -> NONTERM_term 
    | 9 -> NONTERM_object 
    | 10 -> NONTERM_object 
    | 11 -> NONTERM_members 
    | 12 -> NONTERM_members 
    | 13 -> NONTERM_member 
    | 14 -> NONTERM_member 
    | 15 -> NONTERM_array 
    | 16 -> NONTERM_array 
    | 17 -> NONTERM_elements 
    | 18 -> NONTERM_elements 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 15 
let _fsyacc_tagOfErrorTerminal = 13

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | NULL  -> "NULL" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACKET  -> "RBRACKET" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | BOOLEAN _ -> "BOOLEAN" 
  | DOUBLE _ -> "DOUBLE" 
  | INTEGER _ -> "INTEGER" 
  | STRING _ -> "STRING" 
  | IDENT _ -> "IDENT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | BOOLEAN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOUBLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INTEGER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;5us;65535us;0us;2us;19us;20us;22us;23us;24us;28us;29us;30us;5us;65535us;0us;4us;19us;4us;22us;4us;24us;4us;29us;4us;1us;65535us;11us;13us;2us;65535us;11us;15us;16us;17us;5us;65535us;0us;5us;19us;5us;22us;5us;24us;5us;29us;5us;1us;65535us;24us;26us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;9us;15us;17us;20us;26us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;2us;1us;3us;1us;4us;1us;5us;1us;6us;1us;7us;1us;8us;2us;9us;10us;1us;9us;2us;10us;12us;1us;10us;1us;11us;1us;12us;1us;12us;1us;13us;1us;13us;1us;13us;1us;14us;1us;14us;1us;14us;2us;15us;16us;1us;15us;2us;16us;18us;1us;16us;1us;17us;1us;18us;1us;18us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;18us;20us;22us;25us;27us;30us;32us;34us;36us;38us;40us;42us;44us;46us;48us;50us;53us;55us;58us;60us;62us;64us;|]
let _fsyacc_action_rows = 31
let _fsyacc_actionTableElements = [|7us;32768us;1us;10us;4us;24us;6us;11us;8us;9us;9us;8us;10us;7us;11us;6us;0us;49152us;1us;32768us;0us;3us;0us;16385us;0us;16386us;0us;16387us;0us;16388us;0us;16389us;0us;16390us;0us;16391us;0us;16392us;3us;32768us;7us;12us;11us;18us;12us;21us;0us;16393us;2us;32768us;2us;16us;7us;14us;0us;16394us;0us;16395us;2us;32768us;11us;18us;12us;21us;0us;16396us;1us;32768us;3us;19us;7us;32768us;1us;10us;4us;24us;6us;11us;8us;9us;9us;8us;10us;7us;11us;6us;0us;16397us;1us;32768us;3us;22us;7us;32768us;1us;10us;4us;24us;6us;11us;8us;9us;9us;8us;10us;7us;11us;6us;0us;16398us;8us;32768us;1us;10us;4us;24us;5us;25us;6us;11us;8us;9us;9us;8us;10us;7us;11us;6us;0us;16399us;2us;32768us;2us;29us;5us;27us;0us;16400us;0us;16401us;7us;32768us;1us;10us;4us;24us;6us;11us;8us;9us;9us;8us;10us;7us;11us;6us;0us;16402us;|]
let _fsyacc_actionTableRowOffsets = [|0us;8us;9us;11us;12us;13us;14us;15us;16us;17us;18us;19us;23us;24us;27us;28us;29us;32us;33us;35us;43us;44us;46us;54us;55us;64us;65us;68us;69us;70us;78us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;1us;1us;1us;1us;1us;1us;1us;2us;3us;1us;3us;3us;3us;2us;3us;1us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;2us;2us;2us;2us;3us;3us;4us;4us;5us;5us;6us;6us;7us;7us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;16386us;16387us;16388us;16389us;16390us;16391us;16392us;65535us;16393us;65535us;16394us;16395us;65535us;16396us;65535us;65535us;16397us;65535us;65535us;16398us;65535us;16399us;65535us;16400us;16401us;65535us;16402us;|]
let _fsyacc_reductions = lazy [|
# 167 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startpolicy));
# 176 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Grammar.fsy"
                                                           _1 
                   )
# 25 "Grammar.fsy"
                 : Value));
# 187 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_object in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "Grammar.fsy"
                                                           _1 
                   )
# 28 "Grammar.fsy"
                 : 'gentype_term));
# 198 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_array in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Grammar.fsy"
                                                           _1 
                   )
# 29 "Grammar.fsy"
                 : 'gentype_term));
# 209 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Grammar.fsy"
                                                           Value.String(_1) 
                   )
# 30 "Grammar.fsy"
                 : 'gentype_term));
# 220 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int64 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Grammar.fsy"
                                                           Value.Integer(_1) 
                   )
# 31 "Grammar.fsy"
                 : 'gentype_term));
# 231 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> double in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Grammar.fsy"
                                                           Value.Double(_1) 
                   )
# 32 "Grammar.fsy"
                 : 'gentype_term));
# 242 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Grammar.fsy"
                                                           Value.Boolean(_1) 
                   )
# 33 "Grammar.fsy"
                 : 'gentype_term));
# 253 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Grammar.fsy"
                                                           Value.Null 
                   )
# 34 "Grammar.fsy"
                 : 'gentype_term));
# 263 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Grammar.fsy"
                                                           termObject 1 parseState 
                   )
# 37 "Grammar.fsy"
                 : 'gentype_object));
# 273 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_members in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Grammar.fsy"
                                                           termObject 2 parseState 
                   )
# 38 "Grammar.fsy"
                 : 'gentype_object));
# 284 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_member in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Grammar.fsy"
                                                           [ _1; ] 
                   )
# 41 "Grammar.fsy"
                 : 'gentype_members));
# 295 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_members in
            let _3 = parseState.GetInput(3) :?> 'gentype_member in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Grammar.fsy"
                                                           _3 :: _1 
                   )
# 42 "Grammar.fsy"
                 : 'gentype_members));
# 307 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Grammar.fsy"
                                                           (_1, _3) 
                   )
# 45 "Grammar.fsy"
                 : 'gentype_member));
# 319 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Grammar.fsy"
                                                           (_1, _3) 
                   )
# 46 "Grammar.fsy"
                 : 'gentype_member));
# 331 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Grammar.fsy"
                                                           termArray 1 parseState 
                   )
# 49 "Grammar.fsy"
                 : 'gentype_array));
# 341 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_elements in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Grammar.fsy"
                                                           termArray 2 parseState 
                   )
# 50 "Grammar.fsy"
                 : 'gentype_array));
# 352 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Grammar.fsy"
                                                           [ _1; ] 
                   )
# 53 "Grammar.fsy"
                 : 'gentype_elements));
# 363 "Grammar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_elements in
            let _3 = parseState.GetInput(3) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Grammar.fsy"
                                                           _3 :: _1 
                   )
# 54 "Grammar.fsy"
                 : 'gentype_elements));
|]
# 376 "Grammar.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 16;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let policy lexer lexbuf : Value =
    engine lexer lexbuf 0 :?> _
